import { useState, useEffect } from "react"
import test from "../media/character-images/medium-mode/amaterasu.png"
import * as mediaModule from "../mediaExports"
const CurrentObjectives = () => {
    //the indexes of the character image consts are sorted to match the order of the CharacterDropdown list in PhotoTagging so that the same index in that component can be used to delete the nodes generated by populateImages to create a responsive HUD for the user
    const easyCharacterImages = [mediaModule.guile, mediaModule.ironman, mediaModule.leo, mediaModule.ryu, mediaModule.scorpion, mediaModule.venom];
    const mediumCharacterImages = [mediaModule.amaterasu, mediaModule.cloud, mediaModule.commanderShephard, mediaModule.dukeNukem, mediaModule.jakDaxter, mediaModule.slyCooper];
    const hardCharacterImages = [mediaModule.batrider, mediaModule.darkSeer, mediaModule.luna, mediaModule.magnus, mediaModule.medusa, mediaModule.naturesProphet, mediaModule.phantomAssassin, mediaModule.sven, mediaModule.tinker];
    const [deleteImageIndex, setDeleteImageIndex] = useState(sessionStorage.getItem("deleteImageIndex"));
    let jsonCharacterList = sessionStorage.getItem("characterList");
    let difficulty = sessionStorage.getItem("difficulty")
    let parsedList = JSON.parse(jsonCharacterList);
    let characterKeys = Object.keys(parsedList);

    //TODO take the newly added image id's and associate them somehow with a truthy character dropdown list selection so that the image transitions out of the image list
    const populateImages = () => {
        if (difficulty === "easy") {
            return easyCharacterImages.map((element, index) => <div className="current-objective-images-container"><img className={"current-objective-images"} key={`image1-key-${index}`} src={element}></img><h3 key={`image1-name-key-${index}`}>{characterKeys[index]}</h3></div>)
        } else if (difficulty === "medium") {
            return mediumCharacterImages.map((element, index) => <div className="current-objective-images-container"><img className={"current-objective-images"} key={`image2-key-${index}`} src={element}></img><h3 key={`image2-name-key-${index}`}>{characterKeys[index]}</h3></div>)
        } else if (difficulty === "hard") {
            return hardCharacterImages.map((element, index) => <div className="current-objective-images-container"><img className={"current-objective-images"} key={`image3-key-${index}`} src={element}></img><h3 key={`image3-name-key-${index}`}>{characterKeys[index]}</h3></div>)
        }
    }

    useEffect(() => {
        let objectiveImagesNode = document.getElementById("current-objectives-root");

        //check for null as a string since storage method objects are always strings
        if (deleteImageIndex != "null") {
            objectiveImagesNode.removeChild(objectiveImagesNode.childNodes[Number(deleteImageIndex)]);
            console.log('deleted node')
            //insures no further deletions occur following checkSelection() calls in PhotoTagging component
            sessionStorage.setItem("deleteImageIndex", "null")
        }
        setDeleteImageIndex(sessionStorage.getItem("deleteImageIndex"))
    });
    return (
        <div id="current-objectives-root">
            {
                populateImages()
            }
        </div>
    );
}

export { CurrentObjectives }